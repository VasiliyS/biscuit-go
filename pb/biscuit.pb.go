// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.2
// source: biscuit.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OpUnary_Kind int32

const (
	OpUnary_Negate OpUnary_Kind = 0
	OpUnary_Parens OpUnary_Kind = 1
	OpUnary_Length OpUnary_Kind = 2
)

// Enum value maps for OpUnary_Kind.
var (
	OpUnary_Kind_name = map[int32]string{
		0: "Negate",
		1: "Parens",
		2: "Length",
	}
	OpUnary_Kind_value = map[string]int32{
		"Negate": 0,
		"Parens": 1,
		"Length": 2,
	}
)

func (x OpUnary_Kind) Enum() *OpUnary_Kind {
	p := new(OpUnary_Kind)
	*p = x
	return p
}

func (x OpUnary_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpUnary_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[0].Descriptor()
}

func (OpUnary_Kind) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[0]
}

func (x OpUnary_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OpUnary_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OpUnary_Kind(num)
	return nil
}

// Deprecated: Use OpUnary_Kind.Descriptor instead.
func (OpUnary_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{20, 0}
}

type OpBinary_Kind int32

const (
	OpBinary_LessThan       OpBinary_Kind = 0
	OpBinary_GreaterThan    OpBinary_Kind = 1
	OpBinary_LessOrEqual    OpBinary_Kind = 2
	OpBinary_GreaterOrEqual OpBinary_Kind = 3
	OpBinary_Equal          OpBinary_Kind = 4
	OpBinary_Contains       OpBinary_Kind = 5
	OpBinary_Prefix         OpBinary_Kind = 6
	OpBinary_Suffix         OpBinary_Kind = 7
	OpBinary_Regex          OpBinary_Kind = 8
	OpBinary_Add            OpBinary_Kind = 9
	OpBinary_Sub            OpBinary_Kind = 10
	OpBinary_Mul            OpBinary_Kind = 11
	OpBinary_Div            OpBinary_Kind = 12
	OpBinary_And            OpBinary_Kind = 13
	OpBinary_Or             OpBinary_Kind = 14
	OpBinary_Intersection   OpBinary_Kind = 15
	OpBinary_Union          OpBinary_Kind = 16
)

// Enum value maps for OpBinary_Kind.
var (
	OpBinary_Kind_name = map[int32]string{
		0:  "LessThan",
		1:  "GreaterThan",
		2:  "LessOrEqual",
		3:  "GreaterOrEqual",
		4:  "Equal",
		5:  "Contains",
		6:  "Prefix",
		7:  "Suffix",
		8:  "Regex",
		9:  "Add",
		10: "Sub",
		11: "Mul",
		12: "Div",
		13: "And",
		14: "Or",
		15: "Intersection",
		16: "Union",
	}
	OpBinary_Kind_value = map[string]int32{
		"LessThan":       0,
		"GreaterThan":    1,
		"LessOrEqual":    2,
		"GreaterOrEqual": 3,
		"Equal":          4,
		"Contains":       5,
		"Prefix":         6,
		"Suffix":         7,
		"Regex":          8,
		"Add":            9,
		"Sub":            10,
		"Mul":            11,
		"Div":            12,
		"And":            13,
		"Or":             14,
		"Intersection":   15,
		"Union":          16,
	}
)

func (x OpBinary_Kind) Enum() *OpBinary_Kind {
	p := new(OpBinary_Kind)
	*p = x
	return p
}

func (x OpBinary_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpBinary_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[1].Descriptor()
}

func (OpBinary_Kind) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[1]
}

func (x OpBinary_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OpBinary_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OpBinary_Kind(num)
	return nil
}

// Deprecated: Use OpBinary_Kind.Descriptor instead.
func (OpBinary_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{21, 0}
}

type Policy_Kind int32

const (
	Policy_Allow Policy_Kind = 0
	Policy_Deny  Policy_Kind = 1
)

// Enum value maps for Policy_Kind.
var (
	Policy_Kind_name = map[int32]string{
		0: "Allow",
		1: "Deny",
	}
	Policy_Kind_value = map[string]int32{
		"Allow": 0,
		"Deny":  1,
	}
)

func (x Policy_Kind) Enum() *Policy_Kind {
	p := new(Policy_Kind)
	*p = x
	return p
}

func (x Policy_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Policy_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_biscuit_proto_enumTypes[2].Descriptor()
}

func (Policy_Kind) Type() protoreflect.EnumType {
	return &file_biscuit_proto_enumTypes[2]
}

func (x Policy_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Policy_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Policy_Kind(num)
	return nil
}

// Deprecated: Use Policy_Kind.Descriptor instead.
func (Policy_Kind) EnumDescriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{22, 0}
}

type Biscuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootKeyId *uint32        `protobuf:"varint,1,opt,name=rootKeyId" json:"rootKeyId,omitempty"`
	Authority *SignedBlock   `protobuf:"bytes,2,req,name=authority" json:"authority,omitempty"`
	Blocks    []*SignedBlock `protobuf:"bytes,3,rep,name=blocks" json:"blocks,omitempty"`
	Proof     *Proof         `protobuf:"bytes,4,req,name=proof" json:"proof,omitempty"`
}

func (x *Biscuit) Reset() {
	*x = Biscuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Biscuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Biscuit) ProtoMessage() {}

func (x *Biscuit) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Biscuit.ProtoReflect.Descriptor instead.
func (*Biscuit) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{0}
}

func (x *Biscuit) GetRootKeyId() uint32 {
	if x != nil && x.RootKeyId != nil {
		return *x.RootKeyId
	}
	return 0
}

func (x *Biscuit) GetAuthority() *SignedBlock {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *Biscuit) GetBlocks() []*SignedBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *Biscuit) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

type SignedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block     []byte `protobuf:"bytes,1,req,name=block" json:"block,omitempty"`
	NextKey   []byte `protobuf:"bytes,2,req,name=nextKey" json:"nextKey,omitempty"`
	Signature []byte `protobuf:"bytes,3,req,name=signature" json:"signature,omitempty"`
}

func (x *SignedBlock) Reset() {
	*x = SignedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedBlock) ProtoMessage() {}

func (x *SignedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedBlock.ProtoReflect.Descriptor instead.
func (*SignedBlock) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{1}
}

func (x *SignedBlock) GetBlock() []byte {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *SignedBlock) GetNextKey() []byte {
	if x != nil {
		return x.NextKey
	}
	return nil
}

func (x *SignedBlock) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*Proof_NextSecret
	//	*Proof_FinalSignature
	Content isProof_Content `protobuf_oneof:"Content"`
}

func (x *Proof) Reset() {
	*x = Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{2}
}

func (m *Proof) GetContent() isProof_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Proof) GetNextSecret() []byte {
	if x, ok := x.GetContent().(*Proof_NextSecret); ok {
		return x.NextSecret
	}
	return nil
}

func (x *Proof) GetFinalSignature() []byte {
	if x, ok := x.GetContent().(*Proof_FinalSignature); ok {
		return x.FinalSignature
	}
	return nil
}

type isProof_Content interface {
	isProof_Content()
}

type Proof_NextSecret struct {
	NextSecret []byte `protobuf:"bytes,1,opt,name=nextSecret,oneof"`
}

type Proof_FinalSignature struct {
	FinalSignature []byte `protobuf:"bytes,2,opt,name=finalSignature,oneof"`
}

func (*Proof_NextSecret) isProof_Content() {}

func (*Proof_FinalSignature) isProof_Content() {}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbols  []string   `protobuf:"bytes,1,rep,name=symbols" json:"symbols,omitempty"`
	Context  *string    `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
	Version  *uint32    `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	FactsV2  []*FactV2  `protobuf:"bytes,4,rep,name=facts_v2,json=factsV2" json:"facts_v2,omitempty"`
	RulesV2  []*RuleV2  `protobuf:"bytes,5,rep,name=rules_v2,json=rulesV2" json:"rules_v2,omitempty"`
	ChecksV2 []*CheckV2 `protobuf:"bytes,6,rep,name=checks_v2,json=checksV2" json:"checks_v2,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{3}
}

func (x *Block) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *Block) GetContext() string {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return ""
}

func (x *Block) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Block) GetFactsV2() []*FactV2 {
	if x != nil {
		return x.FactsV2
	}
	return nil
}

func (x *Block) GetRulesV2() []*RuleV2 {
	if x != nil {
		return x.RulesV2
	}
	return nil
}

func (x *Block) GetChecksV2() []*CheckV2 {
	if x != nil {
		return x.ChecksV2
	}
	return nil
}

type FactV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predicate *PredicateV2 `protobuf:"bytes,1,req,name=predicate" json:"predicate,omitempty"`
}

func (x *FactV2) Reset() {
	*x = FactV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactV2) ProtoMessage() {}

func (x *FactV2) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactV2.ProtoReflect.Descriptor instead.
func (*FactV2) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{4}
}

func (x *FactV2) GetPredicate() *PredicateV2 {
	if x != nil {
		return x.Predicate
	}
	return nil
}

type RuleV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head        *PredicateV2    `protobuf:"bytes,1,req,name=head" json:"head,omitempty"`
	Body        []*PredicateV2  `protobuf:"bytes,2,rep,name=body" json:"body,omitempty"`
	Expressions []*ExpressionV2 `protobuf:"bytes,3,rep,name=expressions" json:"expressions,omitempty"`
}

func (x *RuleV2) Reset() {
	*x = RuleV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleV2) ProtoMessage() {}

func (x *RuleV2) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleV2.ProtoReflect.Descriptor instead.
func (*RuleV2) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{5}
}

func (x *RuleV2) GetHead() *PredicateV2 {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *RuleV2) GetBody() []*PredicateV2 {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *RuleV2) GetExpressions() []*ExpressionV2 {
	if x != nil {
		return x.Expressions
	}
	return nil
}

type CheckV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*RuleV2 `protobuf:"bytes,1,rep,name=queries" json:"queries,omitempty"`
}

func (x *CheckV2) Reset() {
	*x = CheckV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckV2) ProtoMessage() {}

func (x *CheckV2) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckV2.ProtoReflect.Descriptor instead.
func (*CheckV2) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{6}
}

func (x *CheckV2) GetQueries() []*RuleV2 {
	if x != nil {
		return x.Queries
	}
	return nil
}

type PredicateV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *uint64 `protobuf:"varint,1,req,name=name" json:"name,omitempty"`
	Ids  []*IDV2 `protobuf:"bytes,2,rep,name=ids" json:"ids,omitempty"`
}

func (x *PredicateV2) Reset() {
	*x = PredicateV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredicateV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredicateV2) ProtoMessage() {}

func (x *PredicateV2) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredicateV2.ProtoReflect.Descriptor instead.
func (*PredicateV2) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{7}
}

func (x *PredicateV2) GetName() uint64 {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return 0
}

func (x *PredicateV2) GetIds() []*IDV2 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type IDV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*IDV2_Variable
	//	*IDV2_Integer
	//	*IDV2_String_
	//	*IDV2_Date
	//	*IDV2_Bytes
	//	*IDV2_Bool
	//	*IDV2_Set
	Content isIDV2_Content `protobuf_oneof:"Content"`
}

func (x *IDV2) Reset() {
	*x = IDV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDV2) ProtoMessage() {}

func (x *IDV2) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDV2.ProtoReflect.Descriptor instead.
func (*IDV2) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{8}
}

func (m *IDV2) GetContent() isIDV2_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *IDV2) GetVariable() uint32 {
	if x, ok := x.GetContent().(*IDV2_Variable); ok {
		return x.Variable
	}
	return 0
}

func (x *IDV2) GetInteger() int64 {
	if x, ok := x.GetContent().(*IDV2_Integer); ok {
		return x.Integer
	}
	return 0
}

func (x *IDV2) GetString_() uint64 {
	if x, ok := x.GetContent().(*IDV2_String_); ok {
		return x.String_
	}
	return 0
}

func (x *IDV2) GetDate() uint64 {
	if x, ok := x.GetContent().(*IDV2_Date); ok {
		return x.Date
	}
	return 0
}

func (x *IDV2) GetBytes() []byte {
	if x, ok := x.GetContent().(*IDV2_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *IDV2) GetBool() bool {
	if x, ok := x.GetContent().(*IDV2_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *IDV2) GetSet() *IDSet {
	if x, ok := x.GetContent().(*IDV2_Set); ok {
		return x.Set
	}
	return nil
}

type isIDV2_Content interface {
	isIDV2_Content()
}

type IDV2_Variable struct {
	Variable uint32 `protobuf:"varint,1,opt,name=variable,oneof"`
}

type IDV2_Integer struct {
	Integer int64 `protobuf:"varint,2,opt,name=integer,oneof"`
}

type IDV2_String_ struct {
	String_ uint64 `protobuf:"varint,3,opt,name=string,oneof"`
}

type IDV2_Date struct {
	Date uint64 `protobuf:"varint,4,opt,name=date,oneof"`
}

type IDV2_Bytes struct {
	Bytes []byte `protobuf:"bytes,5,opt,name=bytes,oneof"`
}

type IDV2_Bool struct {
	Bool bool `protobuf:"varint,6,opt,name=bool,oneof"`
}

type IDV2_Set struct {
	Set *IDSet `protobuf:"bytes,7,opt,name=set,oneof"`
}

func (*IDV2_Variable) isIDV2_Content() {}

func (*IDV2_Integer) isIDV2_Content() {}

func (*IDV2_String_) isIDV2_Content() {}

func (*IDV2_Date) isIDV2_Content() {}

func (*IDV2_Bytes) isIDV2_Content() {}

func (*IDV2_Bool) isIDV2_Content() {}

func (*IDV2_Set) isIDV2_Content() {}

type IDSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set []*IDV2 `protobuf:"bytes,1,rep,name=set" json:"set,omitempty"`
}

func (x *IDSet) Reset() {
	*x = IDSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDSet) ProtoMessage() {}

func (x *IDSet) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDSet.ProtoReflect.Descriptor instead.
func (*IDSet) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{9}
}

func (x *IDSet) GetSet() []*IDV2 {
	if x != nil {
		return x.Set
	}
	return nil
}

type ConstraintV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uint32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Types that are assignable to Constraint:
	//	*ConstraintV2_Int
	//	*ConstraintV2_String_
	//	*ConstraintV2_Date
	//	*ConstraintV2_Bytes
	Constraint isConstraintV2_Constraint `protobuf_oneof:"Constraint"`
}

func (x *ConstraintV2) Reset() {
	*x = ConstraintV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstraintV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintV2) ProtoMessage() {}

func (x *ConstraintV2) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintV2.ProtoReflect.Descriptor instead.
func (*ConstraintV2) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{10}
}

func (x *ConstraintV2) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (m *ConstraintV2) GetConstraint() isConstraintV2_Constraint {
	if m != nil {
		return m.Constraint
	}
	return nil
}

func (x *ConstraintV2) GetInt() *IntConstraintV2 {
	if x, ok := x.GetConstraint().(*ConstraintV2_Int); ok {
		return x.Int
	}
	return nil
}

func (x *ConstraintV2) GetString_() *StringConstraintV2 {
	if x, ok := x.GetConstraint().(*ConstraintV2_String_); ok {
		return x.String_
	}
	return nil
}

func (x *ConstraintV2) GetDate() *DateConstraintV2 {
	if x, ok := x.GetConstraint().(*ConstraintV2_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ConstraintV2) GetBytes() *BytesConstraintV2 {
	if x, ok := x.GetConstraint().(*ConstraintV2_Bytes); ok {
		return x.Bytes
	}
	return nil
}

type isConstraintV2_Constraint interface {
	isConstraintV2_Constraint()
}

type ConstraintV2_Int struct {
	Int *IntConstraintV2 `protobuf:"bytes,2,opt,name=int,oneof"`
}

type ConstraintV2_String_ struct {
	String_ *StringConstraintV2 `protobuf:"bytes,3,opt,name=string,oneof"`
}

type ConstraintV2_Date struct {
	Date *DateConstraintV2 `protobuf:"bytes,4,opt,name=date,oneof"`
}

type ConstraintV2_Bytes struct {
	Bytes *BytesConstraintV2 `protobuf:"bytes,5,opt,name=bytes,oneof"`
}

func (*ConstraintV2_Int) isConstraintV2_Constraint() {}

func (*ConstraintV2_String_) isConstraintV2_Constraint() {}

func (*ConstraintV2_Date) isConstraintV2_Constraint() {}

func (*ConstraintV2_Bytes) isConstraintV2_Constraint() {}

type IntConstraintV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Constraint:
	//	*IntConstraintV2_LessThan
	//	*IntConstraintV2_GreaterThan
	//	*IntConstraintV2_LessOrEqual
	//	*IntConstraintV2_GreaterOrEqual
	//	*IntConstraintV2_Equal
	//	*IntConstraintV2_InSet
	//	*IntConstraintV2_NotInSet
	Constraint isIntConstraintV2_Constraint `protobuf_oneof:"Constraint"`
}

func (x *IntConstraintV2) Reset() {
	*x = IntConstraintV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntConstraintV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntConstraintV2) ProtoMessage() {}

func (x *IntConstraintV2) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntConstraintV2.ProtoReflect.Descriptor instead.
func (*IntConstraintV2) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{11}
}

func (m *IntConstraintV2) GetConstraint() isIntConstraintV2_Constraint {
	if m != nil {
		return m.Constraint
	}
	return nil
}

func (x *IntConstraintV2) GetLessThan() int64 {
	if x, ok := x.GetConstraint().(*IntConstraintV2_LessThan); ok {
		return x.LessThan
	}
	return 0
}

func (x *IntConstraintV2) GetGreaterThan() int64 {
	if x, ok := x.GetConstraint().(*IntConstraintV2_GreaterThan); ok {
		return x.GreaterThan
	}
	return 0
}

func (x *IntConstraintV2) GetLessOrEqual() int64 {
	if x, ok := x.GetConstraint().(*IntConstraintV2_LessOrEqual); ok {
		return x.LessOrEqual
	}
	return 0
}

func (x *IntConstraintV2) GetGreaterOrEqual() int64 {
	if x, ok := x.GetConstraint().(*IntConstraintV2_GreaterOrEqual); ok {
		return x.GreaterOrEqual
	}
	return 0
}

func (x *IntConstraintV2) GetEqual() int64 {
	if x, ok := x.GetConstraint().(*IntConstraintV2_Equal); ok {
		return x.Equal
	}
	return 0
}

func (x *IntConstraintV2) GetInSet() *IntSet {
	if x, ok := x.GetConstraint().(*IntConstraintV2_InSet); ok {
		return x.InSet
	}
	return nil
}

func (x *IntConstraintV2) GetNotInSet() *IntSet {
	if x, ok := x.GetConstraint().(*IntConstraintV2_NotInSet); ok {
		return x.NotInSet
	}
	return nil
}

type isIntConstraintV2_Constraint interface {
	isIntConstraintV2_Constraint()
}

type IntConstraintV2_LessThan struct {
	LessThan int64 `protobuf:"varint,1,opt,name=less_than,json=lessThan,oneof"`
}

type IntConstraintV2_GreaterThan struct {
	GreaterThan int64 `protobuf:"varint,2,opt,name=greater_than,json=greaterThan,oneof"`
}

type IntConstraintV2_LessOrEqual struct {
	LessOrEqual int64 `protobuf:"varint,3,opt,name=less_or_equal,json=lessOrEqual,oneof"`
}

type IntConstraintV2_GreaterOrEqual struct {
	GreaterOrEqual int64 `protobuf:"varint,4,opt,name=greater_or_equal,json=greaterOrEqual,oneof"`
}

type IntConstraintV2_Equal struct {
	Equal int64 `protobuf:"varint,5,opt,name=equal,oneof"`
}

type IntConstraintV2_InSet struct {
	InSet *IntSet `protobuf:"bytes,6,opt,name=in_set,json=inSet,oneof"`
}

type IntConstraintV2_NotInSet struct {
	NotInSet *IntSet `protobuf:"bytes,7,opt,name=not_in_set,json=notInSet,oneof"`
}

func (*IntConstraintV2_LessThan) isIntConstraintV2_Constraint() {}

func (*IntConstraintV2_GreaterThan) isIntConstraintV2_Constraint() {}

func (*IntConstraintV2_LessOrEqual) isIntConstraintV2_Constraint() {}

func (*IntConstraintV2_GreaterOrEqual) isIntConstraintV2_Constraint() {}

func (*IntConstraintV2_Equal) isIntConstraintV2_Constraint() {}

func (*IntConstraintV2_InSet) isIntConstraintV2_Constraint() {}

func (*IntConstraintV2_NotInSet) isIntConstraintV2_Constraint() {}

type IntSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set []int64 `protobuf:"varint,7,rep,packed,name=set" json:"set,omitempty"`
}

func (x *IntSet) Reset() {
	*x = IntSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntSet) ProtoMessage() {}

func (x *IntSet) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntSet.ProtoReflect.Descriptor instead.
func (*IntSet) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{12}
}

func (x *IntSet) GetSet() []int64 {
	if x != nil {
		return x.Set
	}
	return nil
}

type StringConstraintV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Constraint:
	//	*StringConstraintV2_Prefix
	//	*StringConstraintV2_Suffix
	//	*StringConstraintV2_Equal
	//	*StringConstraintV2_InSet
	//	*StringConstraintV2_NotInSet
	//	*StringConstraintV2_Regex
	Constraint isStringConstraintV2_Constraint `protobuf_oneof:"Constraint"`
}

func (x *StringConstraintV2) Reset() {
	*x = StringConstraintV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringConstraintV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringConstraintV2) ProtoMessage() {}

func (x *StringConstraintV2) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringConstraintV2.ProtoReflect.Descriptor instead.
func (*StringConstraintV2) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{13}
}

func (m *StringConstraintV2) GetConstraint() isStringConstraintV2_Constraint {
	if m != nil {
		return m.Constraint
	}
	return nil
}

func (x *StringConstraintV2) GetPrefix() string {
	if x, ok := x.GetConstraint().(*StringConstraintV2_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (x *StringConstraintV2) GetSuffix() string {
	if x, ok := x.GetConstraint().(*StringConstraintV2_Suffix); ok {
		return x.Suffix
	}
	return ""
}

func (x *StringConstraintV2) GetEqual() string {
	if x, ok := x.GetConstraint().(*StringConstraintV2_Equal); ok {
		return x.Equal
	}
	return ""
}

func (x *StringConstraintV2) GetInSet() *StringSet {
	if x, ok := x.GetConstraint().(*StringConstraintV2_InSet); ok {
		return x.InSet
	}
	return nil
}

func (x *StringConstraintV2) GetNotInSet() *StringSet {
	if x, ok := x.GetConstraint().(*StringConstraintV2_NotInSet); ok {
		return x.NotInSet
	}
	return nil
}

func (x *StringConstraintV2) GetRegex() string {
	if x, ok := x.GetConstraint().(*StringConstraintV2_Regex); ok {
		return x.Regex
	}
	return ""
}

type isStringConstraintV2_Constraint interface {
	isStringConstraintV2_Constraint()
}

type StringConstraintV2_Prefix struct {
	Prefix string `protobuf:"bytes,1,opt,name=prefix,oneof"`
}

type StringConstraintV2_Suffix struct {
	Suffix string `protobuf:"bytes,2,opt,name=suffix,oneof"`
}

type StringConstraintV2_Equal struct {
	Equal string `protobuf:"bytes,3,opt,name=equal,oneof"`
}

type StringConstraintV2_InSet struct {
	InSet *StringSet `protobuf:"bytes,4,opt,name=in_set,json=inSet,oneof"`
}

type StringConstraintV2_NotInSet struct {
	NotInSet *StringSet `protobuf:"bytes,5,opt,name=not_in_set,json=notInSet,oneof"`
}

type StringConstraintV2_Regex struct {
	Regex string `protobuf:"bytes,6,opt,name=regex,oneof"`
}

func (*StringConstraintV2_Prefix) isStringConstraintV2_Constraint() {}

func (*StringConstraintV2_Suffix) isStringConstraintV2_Constraint() {}

func (*StringConstraintV2_Equal) isStringConstraintV2_Constraint() {}

func (*StringConstraintV2_InSet) isStringConstraintV2_Constraint() {}

func (*StringConstraintV2_NotInSet) isStringConstraintV2_Constraint() {}

func (*StringConstraintV2_Regex) isStringConstraintV2_Constraint() {}

type StringSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set []uint64 `protobuf:"varint,1,rep,packed,name=set" json:"set,omitempty"`
}

func (x *StringSet) Reset() {
	*x = StringSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringSet) ProtoMessage() {}

func (x *StringSet) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringSet.ProtoReflect.Descriptor instead.
func (*StringSet) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{14}
}

func (x *StringSet) GetSet() []uint64 {
	if x != nil {
		return x.Set
	}
	return nil
}

type DateConstraintV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Constraint:
	//	*DateConstraintV2_Before
	//	*DateConstraintV2_After
	Constraint isDateConstraintV2_Constraint `protobuf_oneof:"Constraint"`
}

func (x *DateConstraintV2) Reset() {
	*x = DateConstraintV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateConstraintV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateConstraintV2) ProtoMessage() {}

func (x *DateConstraintV2) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateConstraintV2.ProtoReflect.Descriptor instead.
func (*DateConstraintV2) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{15}
}

func (m *DateConstraintV2) GetConstraint() isDateConstraintV2_Constraint {
	if m != nil {
		return m.Constraint
	}
	return nil
}

func (x *DateConstraintV2) GetBefore() uint64 {
	if x, ok := x.GetConstraint().(*DateConstraintV2_Before); ok {
		return x.Before
	}
	return 0
}

func (x *DateConstraintV2) GetAfter() uint64 {
	if x, ok := x.GetConstraint().(*DateConstraintV2_After); ok {
		return x.After
	}
	return 0
}

type isDateConstraintV2_Constraint interface {
	isDateConstraintV2_Constraint()
}

type DateConstraintV2_Before struct {
	Before uint64 `protobuf:"varint,1,opt,name=before,oneof"`
}

type DateConstraintV2_After struct {
	After uint64 `protobuf:"varint,2,opt,name=after,oneof"`
}

func (*DateConstraintV2_Before) isDateConstraintV2_Constraint() {}

func (*DateConstraintV2_After) isDateConstraintV2_Constraint() {}

type BytesConstraintV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Constraint:
	//	*BytesConstraintV2_Equal
	//	*BytesConstraintV2_InSet
	//	*BytesConstraintV2_NotInSet
	Constraint isBytesConstraintV2_Constraint `protobuf_oneof:"Constraint"`
}

func (x *BytesConstraintV2) Reset() {
	*x = BytesConstraintV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesConstraintV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesConstraintV2) ProtoMessage() {}

func (x *BytesConstraintV2) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesConstraintV2.ProtoReflect.Descriptor instead.
func (*BytesConstraintV2) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{16}
}

func (m *BytesConstraintV2) GetConstraint() isBytesConstraintV2_Constraint {
	if m != nil {
		return m.Constraint
	}
	return nil
}

func (x *BytesConstraintV2) GetEqual() []byte {
	if x, ok := x.GetConstraint().(*BytesConstraintV2_Equal); ok {
		return x.Equal
	}
	return nil
}

func (x *BytesConstraintV2) GetInSet() *BytesSet {
	if x, ok := x.GetConstraint().(*BytesConstraintV2_InSet); ok {
		return x.InSet
	}
	return nil
}

func (x *BytesConstraintV2) GetNotInSet() *BytesSet {
	if x, ok := x.GetConstraint().(*BytesConstraintV2_NotInSet); ok {
		return x.NotInSet
	}
	return nil
}

type isBytesConstraintV2_Constraint interface {
	isBytesConstraintV2_Constraint()
}

type BytesConstraintV2_Equal struct {
	Equal []byte `protobuf:"bytes,1,opt,name=equal,oneof"`
}

type BytesConstraintV2_InSet struct {
	InSet *BytesSet `protobuf:"bytes,2,opt,name=in_set,json=inSet,oneof"`
}

type BytesConstraintV2_NotInSet struct {
	NotInSet *BytesSet `protobuf:"bytes,3,opt,name=not_in_set,json=notInSet,oneof"`
}

func (*BytesConstraintV2_Equal) isBytesConstraintV2_Constraint() {}

func (*BytesConstraintV2_InSet) isBytesConstraintV2_Constraint() {}

func (*BytesConstraintV2_NotInSet) isBytesConstraintV2_Constraint() {}

type BytesSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set [][]byte `protobuf:"bytes,1,rep,name=set" json:"set,omitempty"`
}

func (x *BytesSet) Reset() {
	*x = BytesSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesSet) ProtoMessage() {}

func (x *BytesSet) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesSet.ProtoReflect.Descriptor instead.
func (*BytesSet) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{17}
}

func (x *BytesSet) GetSet() [][]byte {
	if x != nil {
		return x.Set
	}
	return nil
}

type ExpressionV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ops []*Op `protobuf:"bytes,1,rep,name=ops" json:"ops,omitempty"`
}

func (x *ExpressionV2) Reset() {
	*x = ExpressionV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpressionV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressionV2) ProtoMessage() {}

func (x *ExpressionV2) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressionV2.ProtoReflect.Descriptor instead.
func (*ExpressionV2) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{18}
}

func (x *ExpressionV2) GetOps() []*Op {
	if x != nil {
		return x.Ops
	}
	return nil
}

type Op struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//	*Op_Value
	//	*Op_Unary
	//	*Op_Binary
	Content isOp_Content `protobuf_oneof:"Content"`
}

func (x *Op) Reset() {
	*x = Op{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Op) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Op) ProtoMessage() {}

func (x *Op) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Op.ProtoReflect.Descriptor instead.
func (*Op) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{19}
}

func (m *Op) GetContent() isOp_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Op) GetValue() *IDV2 {
	if x, ok := x.GetContent().(*Op_Value); ok {
		return x.Value
	}
	return nil
}

func (x *Op) GetUnary() *OpUnary {
	if x, ok := x.GetContent().(*Op_Unary); ok {
		return x.Unary
	}
	return nil
}

func (x *Op) GetBinary() *OpBinary {
	if x, ok := x.GetContent().(*Op_Binary); ok {
		return x.Binary
	}
	return nil
}

type isOp_Content interface {
	isOp_Content()
}

type Op_Value struct {
	Value *IDV2 `protobuf:"bytes,1,opt,name=value,oneof"`
}

type Op_Unary struct {
	Unary *OpUnary `protobuf:"bytes,2,opt,name=unary,oneof"`
}

type Op_Binary struct {
	Binary *OpBinary `protobuf:"bytes,3,opt,name=Binary,oneof"`
}

func (*Op_Value) isOp_Content() {}

func (*Op_Unary) isOp_Content() {}

func (*Op_Binary) isOp_Content() {}

type OpUnary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *OpUnary_Kind `protobuf:"varint,1,req,name=kind,enum=OpUnary_Kind" json:"kind,omitempty"`
}

func (x *OpUnary) Reset() {
	*x = OpUnary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpUnary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpUnary) ProtoMessage() {}

func (x *OpUnary) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpUnary.ProtoReflect.Descriptor instead.
func (*OpUnary) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{20}
}

func (x *OpUnary) GetKind() OpUnary_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return OpUnary_Negate
}

type OpBinary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *OpBinary_Kind `protobuf:"varint,1,req,name=kind,enum=OpBinary_Kind" json:"kind,omitempty"`
}

func (x *OpBinary) Reset() {
	*x = OpBinary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpBinary) ProtoMessage() {}

func (x *OpBinary) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpBinary.ProtoReflect.Descriptor instead.
func (*OpBinary) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{21}
}

func (x *OpBinary) GetKind() OpBinary_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return OpBinary_LessThan
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*RuleV2    `protobuf:"bytes,1,rep,name=queries" json:"queries,omitempty"`
	Kind    *Policy_Kind `protobuf:"varint,2,req,name=kind,enum=Policy_Kind" json:"kind,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{22}
}

func (x *Policy) GetQueries() []*RuleV2 {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *Policy) GetKind() Policy_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return Policy_Allow
}

type VerifierPolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbols  []string   `protobuf:"bytes,1,rep,name=symbols" json:"symbols,omitempty"`
	Version  *uint32    `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	Facts    []*FactV2  `protobuf:"bytes,3,rep,name=facts" json:"facts,omitempty"`
	Rules    []*RuleV2  `protobuf:"bytes,4,rep,name=rules" json:"rules,omitempty"`
	Checks   []*CheckV2 `protobuf:"bytes,5,rep,name=checks" json:"checks,omitempty"`
	Policies []*Policy  `protobuf:"bytes,6,rep,name=policies" json:"policies,omitempty"`
}

func (x *VerifierPolicies) Reset() {
	*x = VerifierPolicies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_biscuit_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifierPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifierPolicies) ProtoMessage() {}

func (x *VerifierPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_biscuit_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifierPolicies.ProtoReflect.Descriptor instead.
func (*VerifierPolicies) Descriptor() ([]byte, []int) {
	return file_biscuit_proto_rawDescGZIP(), []int{23}
}

func (x *VerifierPolicies) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *VerifierPolicies) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *VerifierPolicies) GetFacts() []*FactV2 {
	if x != nil {
		return x.Facts
	}
	return nil
}

func (x *VerifierPolicies) GetRules() []*RuleV2 {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *VerifierPolicies) GetChecks() []*CheckV2 {
	if x != nil {
		return x.Checks
	}
	return nil
}

func (x *VerifierPolicies) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

var File_biscuit_proto protoreflect.FileDescriptor

var file_biscuit_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x97, 0x01, 0x0a, 0x07, 0x42, 0x69, 0x73, 0x63, 0x75, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x72, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x5b, 0x0a, 0x0b, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x07, 0x6e, 0x65, 0x78, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x5e, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x20, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x28, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x08, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x56, 0x32, 0x52, 0x07, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x56, 0x32, 0x12, 0x22, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x07, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x12, 0x25, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x5f, 0x76, 0x32, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x56, 0x32, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x56, 0x32, 0x22, 0x34, 0x0a,
	0x06, 0x46, 0x61, 0x63, 0x74, 0x56, 0x32, 0x12, 0x2a, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x32, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x22, 0x7d, 0x0a, 0x06, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x32, 0x12, 0x20, 0x0a,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x32, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12,
	0x20, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x32, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x12, 0x2f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x2c, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x32, 0x12, 0x21, 0x0a,
	0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x22, 0x3a, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x32, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x49, 0x44, 0x56, 0x32, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xc5, 0x01, 0x0a,
	0x04, 0x49, 0x44, 0x56, 0x32, 0x12, 0x1c, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x1a, 0x0a,
	0x03, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x49, 0x44, 0x53,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x20, 0x0a, 0x05, 0x49, 0x44, 0x53, 0x65, 0x74, 0x12, 0x17, 0x0a,
	0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x49, 0x44, 0x56,
	0x32, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x56, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x49, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x56, 0x32, 0x48, 0x00, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x2d, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x56, 0x32, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x56, 0x32, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x56, 0x32, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22,
	0x98, 0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x56, 0x32, 0x12, 0x1d, 0x0a, 0x09, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68,
	0x61, 0x6e, 0x12, 0x23, 0x0a, 0x0c, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x65, 0x73, 0x73, 0x5f,
	0x6f, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x0b, 0x6c, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x2a, 0x0a,
	0x10, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x71, 0x75,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x65, 0x71, 0x75, 0x61,
	0x6c, 0x12, 0x20, 0x0a, 0x06, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e,
	0x53, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0x1e, 0x0a, 0x06, 0x49, 0x6e,
	0x74, 0x53, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x12, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x56,
	0x32, 0x12, 0x18, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x06, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x23, 0x0a,
	0x06, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x53,
	0x65, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x22, 0x21, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x42, 0x02,
	0x10, 0x01, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0x52, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x56, 0x32, 0x12, 0x18, 0x0a, 0x06, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x42, 0x0c, 0x0a,
	0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x11,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x56,
	0x32, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x06, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x29, 0x0a,
	0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x53, 0x65, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0x1c, 0x0a, 0x08, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53,
	0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x03, 0x73, 0x65, 0x74, 0x22, 0x25, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x56, 0x32, 0x12, 0x15, 0x0a, 0x03, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x03, 0x2e, 0x4f, 0x70, 0x52, 0x03, 0x6f, 0x70, 0x73, 0x22, 0x75, 0x0a, 0x02, 0x4f,
	0x70, 0x12, 0x1d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x49, 0x44, 0x56, 0x32, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x20, 0x0a, 0x05, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x4f, 0x70, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x61,
	0x72, 0x79, 0x12, 0x23, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4f, 0x70, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x58, 0x0a, 0x07, 0x4f, 0x70, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x4f, 0x70,
	0x55, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x22, 0x2a, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x73, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x10, 0x02, 0x22, 0x89, 0x02, 0x0a,
	0x08, 0x4f, 0x70, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x4f, 0x70, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xd8, 0x01,
	0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68,
	0x61, 0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54,
	0x68, 0x61, 0x6e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x45,
	0x71, 0x75, 0x61, 0x6c, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x71,
	0x75, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x10, 0x06, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x10, 0x09, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x75, 0x62, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x75, 0x6c, 0x10,
	0x0b, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x69, 0x76, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6e,
	0x64, 0x10, 0x0d, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x72, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0f, 0x12, 0x09, 0x0a,
	0x05, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x10, 0x10, 0x22, 0x6a, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x21, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x1b, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x09, 0x0a, 0x05, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x65,
	0x6e, 0x79, 0x10, 0x01, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x05, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x46,
	0x61, 0x63, 0x74, 0x56, 0x32, 0x52, 0x05, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x56, 0x32, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x06, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x56, 0x32, 0x52, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x23, 0x0a,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62,
}

var (
	file_biscuit_proto_rawDescOnce sync.Once
	file_biscuit_proto_rawDescData = file_biscuit_proto_rawDesc
)

func file_biscuit_proto_rawDescGZIP() []byte {
	file_biscuit_proto_rawDescOnce.Do(func() {
		file_biscuit_proto_rawDescData = protoimpl.X.CompressGZIP(file_biscuit_proto_rawDescData)
	})
	return file_biscuit_proto_rawDescData
}

var file_biscuit_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_biscuit_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_biscuit_proto_goTypes = []interface{}{
	(OpUnary_Kind)(0),          // 0: OpUnary.Kind
	(OpBinary_Kind)(0),         // 1: OpBinary.Kind
	(Policy_Kind)(0),           // 2: Policy.Kind
	(*Biscuit)(nil),            // 3: Biscuit
	(*SignedBlock)(nil),        // 4: SignedBlock
	(*Proof)(nil),              // 5: Proof
	(*Block)(nil),              // 6: Block
	(*FactV2)(nil),             // 7: FactV2
	(*RuleV2)(nil),             // 8: RuleV2
	(*CheckV2)(nil),            // 9: CheckV2
	(*PredicateV2)(nil),        // 10: PredicateV2
	(*IDV2)(nil),               // 11: IDV2
	(*IDSet)(nil),              // 12: IDSet
	(*ConstraintV2)(nil),       // 13: ConstraintV2
	(*IntConstraintV2)(nil),    // 14: IntConstraintV2
	(*IntSet)(nil),             // 15: IntSet
	(*StringConstraintV2)(nil), // 16: StringConstraintV2
	(*StringSet)(nil),          // 17: StringSet
	(*DateConstraintV2)(nil),   // 18: DateConstraintV2
	(*BytesConstraintV2)(nil),  // 19: BytesConstraintV2
	(*BytesSet)(nil),           // 20: BytesSet
	(*ExpressionV2)(nil),       // 21: ExpressionV2
	(*Op)(nil),                 // 22: Op
	(*OpUnary)(nil),            // 23: OpUnary
	(*OpBinary)(nil),           // 24: OpBinary
	(*Policy)(nil),             // 25: Policy
	(*VerifierPolicies)(nil),   // 26: VerifierPolicies
}
var file_biscuit_proto_depIdxs = []int32{
	4,  // 0: Biscuit.authority:type_name -> SignedBlock
	4,  // 1: Biscuit.blocks:type_name -> SignedBlock
	5,  // 2: Biscuit.proof:type_name -> Proof
	7,  // 3: Block.facts_v2:type_name -> FactV2
	8,  // 4: Block.rules_v2:type_name -> RuleV2
	9,  // 5: Block.checks_v2:type_name -> CheckV2
	10, // 6: FactV2.predicate:type_name -> PredicateV2
	10, // 7: RuleV2.head:type_name -> PredicateV2
	10, // 8: RuleV2.body:type_name -> PredicateV2
	21, // 9: RuleV2.expressions:type_name -> ExpressionV2
	8,  // 10: CheckV2.queries:type_name -> RuleV2
	11, // 11: PredicateV2.ids:type_name -> IDV2
	12, // 12: IDV2.set:type_name -> IDSet
	11, // 13: IDSet.set:type_name -> IDV2
	14, // 14: ConstraintV2.int:type_name -> IntConstraintV2
	16, // 15: ConstraintV2.string:type_name -> StringConstraintV2
	18, // 16: ConstraintV2.date:type_name -> DateConstraintV2
	19, // 17: ConstraintV2.bytes:type_name -> BytesConstraintV2
	15, // 18: IntConstraintV2.in_set:type_name -> IntSet
	15, // 19: IntConstraintV2.not_in_set:type_name -> IntSet
	17, // 20: StringConstraintV2.in_set:type_name -> StringSet
	17, // 21: StringConstraintV2.not_in_set:type_name -> StringSet
	20, // 22: BytesConstraintV2.in_set:type_name -> BytesSet
	20, // 23: BytesConstraintV2.not_in_set:type_name -> BytesSet
	22, // 24: ExpressionV2.ops:type_name -> Op
	11, // 25: Op.value:type_name -> IDV2
	23, // 26: Op.unary:type_name -> OpUnary
	24, // 27: Op.Binary:type_name -> OpBinary
	0,  // 28: OpUnary.kind:type_name -> OpUnary.Kind
	1,  // 29: OpBinary.kind:type_name -> OpBinary.Kind
	8,  // 30: Policy.queries:type_name -> RuleV2
	2,  // 31: Policy.kind:type_name -> Policy.Kind
	7,  // 32: VerifierPolicies.facts:type_name -> FactV2
	8,  // 33: VerifierPolicies.rules:type_name -> RuleV2
	9,  // 34: VerifierPolicies.checks:type_name -> CheckV2
	25, // 35: VerifierPolicies.policies:type_name -> Policy
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_biscuit_proto_init() }
func file_biscuit_proto_init() {
	if File_biscuit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_biscuit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Biscuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredicateV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstraintV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntConstraintV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringConstraintV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateConstraintV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesConstraintV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpressionV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Op); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpUnary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpBinary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_biscuit_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifierPolicies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_biscuit_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Proof_NextSecret)(nil),
		(*Proof_FinalSignature)(nil),
	}
	file_biscuit_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*IDV2_Variable)(nil),
		(*IDV2_Integer)(nil),
		(*IDV2_String_)(nil),
		(*IDV2_Date)(nil),
		(*IDV2_Bytes)(nil),
		(*IDV2_Bool)(nil),
		(*IDV2_Set)(nil),
	}
	file_biscuit_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ConstraintV2_Int)(nil),
		(*ConstraintV2_String_)(nil),
		(*ConstraintV2_Date)(nil),
		(*ConstraintV2_Bytes)(nil),
	}
	file_biscuit_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*IntConstraintV2_LessThan)(nil),
		(*IntConstraintV2_GreaterThan)(nil),
		(*IntConstraintV2_LessOrEqual)(nil),
		(*IntConstraintV2_GreaterOrEqual)(nil),
		(*IntConstraintV2_Equal)(nil),
		(*IntConstraintV2_InSet)(nil),
		(*IntConstraintV2_NotInSet)(nil),
	}
	file_biscuit_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*StringConstraintV2_Prefix)(nil),
		(*StringConstraintV2_Suffix)(nil),
		(*StringConstraintV2_Equal)(nil),
		(*StringConstraintV2_InSet)(nil),
		(*StringConstraintV2_NotInSet)(nil),
		(*StringConstraintV2_Regex)(nil),
	}
	file_biscuit_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*DateConstraintV2_Before)(nil),
		(*DateConstraintV2_After)(nil),
	}
	file_biscuit_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*BytesConstraintV2_Equal)(nil),
		(*BytesConstraintV2_InSet)(nil),
		(*BytesConstraintV2_NotInSet)(nil),
	}
	file_biscuit_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*Op_Value)(nil),
		(*Op_Unary)(nil),
		(*Op_Binary)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_biscuit_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_biscuit_proto_goTypes,
		DependencyIndexes: file_biscuit_proto_depIdxs,
		EnumInfos:         file_biscuit_proto_enumTypes,
		MessageInfos:      file_biscuit_proto_msgTypes,
	}.Build()
	File_biscuit_proto = out.File
	file_biscuit_proto_rawDesc = nil
	file_biscuit_proto_goTypes = nil
	file_biscuit_proto_depIdxs = nil
}
